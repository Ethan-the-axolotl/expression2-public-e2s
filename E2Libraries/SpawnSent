@name spawnSent Library
@persist [SSent_Cache SSent_Types SSent_SavedSents]:table
# Author -- Vurv
# Source -- https://github.com/Vurv78/expression2-public-e2s/blob/master/E2%20Libraries/SpawnSent
# Modes:
# 1 = spawn regular scripted ent, 2 = spawn npcs
# 3 = spawn a vehicle, 4 = spawn a SWEP/weapon
# 5 = spawn a prop, like propSpawn() but works for ragdolls too
if( first() ){
    SSent_Cache = table()
    SSent_Types = table("gm_spawnsent ","gmod_spawnnpc ","gm_spawnvehicle ","gm_spawnswep ","gm_spawn ")
    SSent_SavedSents = table()
    function spawnSent(Class:string,Pos:vector,Ang:angle,Frozen,Timeout,Type)
    {
        concmd(SSent_Types[Type,string]+Class)
        local O = owner()
        local Code = "gm_spwnsent_"+Class+SSent_Cache:count()
        SSent_Cache[Code,table] = table("class"=Class,"apos"=O:aimPos(),"pos"=Pos,"ang"=Ang,"frozen"=Frozen)
        timer(Code,Timeout)
    }
    function cleanupSents()
    {
        SSent_SavedSents:propDelete()
    }
    spawnSent("models/props_c17/FurnitureMattress001a.mdl",entity():pos(),ang(),0,1,5) # Example on spawning regular props that e2 would fuck up.
}elseif(clkName())
{
    local Name = clkName()
    if(SSent_Cache:exists(Name))
    {
        local T = SSent_Cache[Name,table]
        findByClass(T["class",string])
        findSortByDistance(T["apos",vector])
        local Sent = findResult(1)
        if(Sent){
            SSent_SavedSents:pushEntity(Sent)
            Sent:teleport(T["pos",vector])
            Sent:setAng(T["ang",angle])
            Sent:propFreeze(T["frozen",number])
        }else{hint("Sent timed out on creation",2)}
        SSent_Cache:remove(Name)
    }
}

